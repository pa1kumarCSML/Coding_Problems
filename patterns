-> sliding window
( DS-> array, String, Hashtable;
sample problems -> longest substring with k distinct characters -> https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/
, fruits into baskets -> https://leetcode.com/problems/fruit-into-baskets/ )

-> matrix traversal
(DS-> matrix, queue;
sp -> number of islands ->https://leetcode.com/problems/number-of-islands/,
flood fill -> https://leetcode.com/problems/flood-fill/,
cycle in a matrix -> https://leetcode.com/problems/longest-cycle-in-a-graph/)

-> two pointer
(DS->array, string, linked list;
sp-> squaring a sorted array-> https://leetcode.com/problems/squares-of-a-sorted-array/,
dutch national flag problem -> ,
minimum window sort -> https://leetcode.com/problems/sort-colors/)

-> Fast and slow pointers
(DS->array, string, linked list;
sp-> middle of the linked list -> https://leetcode.com/problems/middle-of-the-linked-list/,
happy number -> https://leetcode.com/problems/happy-number/,
cycle in a circular array -> https://leetcode.com/problems/circular-array-loop/)

-> merge intervals
(DS-> array, heap;
sp-> conflict appointments ->,
minimum meeting rooms -> https://leetcode.com/problems/meeting-rooms-iii/)

-> cyclic sort
(DS-> array;
sp-> find all missing numbers -> https://leetcode.com/problems/find-missing-observations/,
find all duplicate numbers -> https://leetcode.com/problems/find-the-duplicate-number/,
find the first k missing positive numbers -> https://leetcode.com/problems/kth-missing-positive-number/)

-> in place reversal (linked list)
( DS -> LinkedList;
sp-> reverse every k-element -> https://leetcode.com/problems/reverse-nodes-in-k-group/,
rotate a LL -> https://leetcode.com/problems/rotate-list/)

-> breadth-first search(BFS)
(DS->tree, graph, matrix;
sp-> level order traversal -> https://leetcode.com/problems/binary-tree-level-order-traversal/
depth of the tree -> https://leetcode.com/problems/maximum-depth-of-binary-tree/,
connect level order siblings -> https://leetcode.com/problems/binary-tree-level-order-traversal-ii/)

-> depth-first search(DFS)
(DS->tree, graph, matrix;
sp-> path with a given sequence ->https://leetcode.com/problems/path-with-minimum-effort/
, count paths for a sum -> https://leetcode.com/problems/unique-paths/)

-> two heaps
(DS-> array, heap;
sp-> find the median of a number stream ->https://leetcode.com/problems/find-median-from-data-stream/
, next interval -> https://leetcode.com/problems/next-permutation/)

-> subsets
(DS-> array, queue, string;
sp-> string permutation by chaining case -> https://leetcode.com/problems/permutation-in-string/,
unique generalized abbreviation -> https://leetcode.com/problems/generalized-abbreviation/);

-> modified binary search
(Ds-> array;
sp-> ceiling of a number -> https://leetcode.com/problems/sqrtx/,
bitonic array maximum -> https://leetcode.com/problems/minimize-maximum-of-array/)

-> bitwise XOR
(DS-> array,bits;
sp-> two single numbers -> https://leetcode.com/problems/single-number/,
flip and invert an image -> https://leetcode.com/problems/flipping-an-image/)

-> top k elements
(DS-> array, queue, heap;
sp-> k closest points to the origin-> https://leetcode.com/problems/k-closest-points-to-origin/,
maximum distinct elements -> https://leetcode.com/problems/maximum-sum-of-distinct-subarrays-with-length-k/)

-> k-ways merge
(DS-> array, queue, heap;
sp-> kth smallest number in m sorted lists -> https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/)

-> topological Sort
(DS-> array, Hashtable, queue, graph;
ps-> course Shedule -> https://leetcode.com/problems/course-schedule/,
alien dictionary -> https://leetcode.com/problems/alien-dictionary/)

-> 0/1 knapsack
(DS-> array, Hashtable;
sp -> equal subset sum partition -> https://leetcode.com/problems/partition-equal-subset-sum/,
minimum subset sum difference ->https://leetcode.com/problems/sum-of-all-subset-xor-totals/)

-> Fibonacci numbers
(DS-> array, Hashtable;
sp-> staircase -> https://leetcode.com/problems/climbing-stairs/,
house thief -> https://leetcode.com/problems/house-robber/)

-> palindromic subsequence
(DS-> array, Hashtable;
sp-> longest palindromic subsequence -> https://leetcode.com/problems/longest-palindromic-subsequence/,
minimum deletions in a string to make palindrome ->https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/)

-> longest common substring
(DS-> array, Hashtable;
sp-> maximum sum increasing subsequence -> https://leetcode.com/problems/longest-increasing-subsequence/,
edit distance -> https://leetcode.com/problems/edit-distance/)